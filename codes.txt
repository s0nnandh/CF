-------------------------------------------------
Binary Exponentiation

double _pow(double &a, int b) {
    double res = 1;
    while (b > 0) {
        if (b & 1)
            res = res * a ;
        a = a * a;
        b >>= 1;
    }
    return res;
}

-----------------------------------------------------

            Counting


const ll mod  = 1e9 + 7;
namespace modop {
	ll madd(ll a, ll b) {
	  return (a + b) % mod;
	}
	ll msub(ll a, ll b) {
	  return (((a - b) % mod) + mod) % mod;
	}
	ll mmul(ll a, ll b) {
	  return ((a % mod) * (b % mod)) % mod;
	}
	ll mpow(ll base, ll exp) {
	  ll res = 1;
	  while (exp) {
		if (exp % 2 == 1){
			res = (res * base) % mod;
		}
		exp >>= 1;
		base = (base * base) % mod;
	  }
	  return res;
	}
	ll minv(ll base) {
	  return mpow(base, mod - 2);
	}
	ll mdiv(ll a, ll b) {
	  return mmul(a, minv(b));
	}
	
	const ll FACTORIAL_SIZE = 1.1e6;
	ll fact[FACTORIAL_SIZE], ifact[FACTORIAL_SIZE];
	void gen_factorial(ll n) {
		fact[0] = fact[1] = ifact[0] = ifact[1] = 1;
		
		for (ll i = 2; i <= n; i++) {
			fact[i] = (i * fact[i - 1]) % mod;
            //dbg(fact[i]);
		}
		ifact[n] = minv(fact[n]);
		for (ll i = n - 1; i >= 2; i--) {
			ifact[i] = ((i + 1) * ifact[i + 1]) % mod;
		}
	}
	ll nck(ll n, ll k) {
		ll den = (ifact[k] * ifact[n - k]) % mod;
        //dbg(ifact[k],ifact[n - k]);
		return (den * fact[n]) % mod;
	}
}
 
using namespace modop;


ll C(int n, int k) {
    ll res = 1;
    for (int i = n - k + 1; i <= n; ++i)
        res *= i;
    for (int i = 2; i <= k; ++i)
        res /= i;
    return res;
}


ll fac(ll k){
    ll fact = 1;
    for(int i=1; i<=k; i++)
        fact = fact * i;
    return fact;
}

--------------------------------------------------------

- Don't Forget to check at the last iteration i.e, updating answer at the end of

  iteration means i == n-1 check  to update the answer.


--------------------------------------------------------

            Graphs
- A undirected graph which has n vertices and n - 1 edges and is 
connected is a tree.

- A undirected graph which has n vertices and n  edges and that is 
    connected has a cycle a there is only an extra edge an no extra 
    vertices.


------------------------------------------------------------------------------

                    DP
In computer science, a problem is said to have optimal substructure if an optimal
 solution can be constructed from optimal solutions of its subproblems.
This property is used to determine the usefulness of dynamic programming and
 greedy algorithms for a problem.

Typically, a greedy algorithm is used to solve a problem with optimal substructure
 if it can be proven by induction that this is optimal at each step.
  Otherwise, provided the problem exhibits overlapping subproblems as well,
dynamic programming is used.
 If there are no appropriate greedy algorithms and the problem fails 
 to exhibit overlapping subproblems, 
 often a lengthy but straightforward search of the solution space is the best alternative.





 ---- While dividing be careful of dividing by zero


  